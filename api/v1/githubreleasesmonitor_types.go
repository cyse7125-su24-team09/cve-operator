/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// GitHubReleasesMonitorSpec defines the desired state of GitHubReleasesMonitor
type GitHubReleasesMonitorSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// +kubebuilder:validation:MinLength=0

	// The URL of the GitHub repository to monitor
	URL string `json:"url,omitempty"`

	// Specifies the starting point for monitoring releases
	// Valid values are:
	// - "now" (default): fetches releases from the current time (in UTC);
	// - "date": fetches releases from the date specified in "YYYY-DD-MM" format;
	// +optional
	MonitorFrom string `json:"monitorFrom,omitempty"`

	// Name of the Helm release used to install operator
	HelmReleaseName string `json:"helmReleaseName,omitempty"`

	// Configuration for GitHubRelease Job
	GitHubReleaseJobConfig GitHubReleaseJobConfig `json:"githubReleaseJobConfig,omitempty"`
}

type GitHubReleaseMetaData struct {
	Name        string      `json:"name"`
	URL         string      `json:"url"`
	TagName     string      `json:"-"`
	PublishedAt metav1.Time `json:"publishedAt"`
}

// GitHubReleasesMonitorStatus defines the observed state of GitHubReleasesMonitor
type GitHubReleasesMonitorStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// List of GitHub releases monitored for processing in the last run
	Releases []GitHubReleaseMetaData `json:"releases,omitempty"`

	// The last time releases were fetched (in UTC)
	LastRetrievedAt *metav1.Time `json:"lastRetrievedAt,omitempty"`

	// Value of monitorFrom timestamp (in UTC)
	MonitorFromTimestamp *metav1.Time `json:"monitorFromTimestamp,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// GitHubReleasesMonitor is the Schema for the githubreleasesmonitors API
type GitHubReleasesMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GitHubReleasesMonitorSpec   `json:"spec,omitempty"`
	Status GitHubReleasesMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitHubReleasesMonitorList contains a list of GitHubReleasesMonitor
type GitHubReleasesMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitHubReleasesMonitor `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GitHubReleasesMonitor{}, &GitHubReleasesMonitorList{})
}
