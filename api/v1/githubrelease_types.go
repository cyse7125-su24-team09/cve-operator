/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// GitHubReleaseSpec defines the desired state of GitHubRelease
type GitHubReleaseSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// +kubebuilder:validation:MinLength=0

	// URL of the GitHub release asset to download
	URL string `json:"url"`

	// Name of the GitHub release
	Name string `json:"name"`

	// Name of the Helm release used to install operator
	HelmReleaseName string `json:"helmReleaseName,omitempty"`

	// Configuration for GitHubRelease Job
	GitHubReleaseJobConfig GitHubReleaseJobConfig `json:"githubReleaseJobConfig,omitempty"`
}

type GitHubReleaseJobConfig struct {
	Image           string            `json:"image,omitempty"`
	ImagePullPolicy corev1.PullPolicy `json:"imagePullPolicy,omitempty"`

	// Specifies maximum number of retries before deleting the associated job and recreating it
	// Defaults to 3
	// +optional
	BackoffLimit int32 `json:"backoffLimit,omitempty"`
}

// GitHubReleaseStatus defines the observed state of GitHubRelease
type GitHubReleaseStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// URL of the delta asset of the GitHub release
	DeltaAssetURL string `json:"deltaAssetUrl,omitempty"`

	// Time when the release was last processed
	// +optional
	LastProcessedTime *metav1.Time `json:"lastProcessedTime,omitempty"`

	// Status of the associated job
	JobStatus string `json:"jobStatus,omitempty"`

	// Number of retries the associated job has failed
	JobRetryCount int32 `json:"retries,omitempty"`

	// A pointers to the associated job resource
	// +optional
	JobRef *corev1.ObjectReference `json:"jobRef,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// GitHubRelease is the Schema for the githubreleases API
type GitHubRelease struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GitHubReleaseSpec   `json:"spec,omitempty"`
	Status GitHubReleaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitHubReleaseList contains a list of GitHubRelease
type GitHubReleaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitHubRelease `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GitHubRelease{}, &GitHubReleaseList{})
}
