/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"fmt"
	"strings"

	cveproducerv1 "github.com/cyse7125-su24-team09/cve-operator/api/v1"
	"github.com/google/go-github/github"
	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ref "k8s.io/client-go/tools/reference"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/log"
)

// GitHubReleaseReconciler reconciles a GitHubRelease object
type GitHubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

const (
	finalizerName = "githubrelease.cve-producer.archops.com/finalizer"
)

// +kubebuilder:rbac:groups=cve-producer.archops.com,resources=githubreleases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=cve-producer.archops.com,resources=githubreleases/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=cve-producer.archops.com,resources=githubreleases/finalizers,verbs=update
// +kubebuilder:rbac:groups=batch,resources=jobs,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=batch,resources=jobs/status,verbs=get

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the GitHubRelease object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GitHubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	githubRelease := &cveproducerv1.GitHubRelease{}
	if err := r.Get(ctx, req.NamespacedName, githubRelease); err != nil {
		log.Error(err, "Unable to fetch GitHubRelease instance")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	if githubRelease.ObjectMeta.DeletionTimestamp.IsZero() {
		// Add finalizer
		if !controllerutil.ContainsFinalizer(githubRelease, finalizerName) {
			controllerutil.AddFinalizer(githubRelease, finalizerName)
			if err := r.Update(ctx, githubRelease); err != nil {
				return ctrl.Result{}, err
			}
		}
	} else {
		// Delete dependent resources and finalizer
		if controllerutil.ContainsFinalizer(githubRelease, finalizerName) {
			if err := r.cleanupJobs(ctx, githubRelease); err != nil {
				return ctrl.Result{}, err
			}

			controllerutil.RemoveFinalizer(githubRelease, finalizerName)
			if err := r.Update(ctx, githubRelease); err != nil {
				return ctrl.Result{}, err
			}
		}

		return ctrl.Result{}, nil
	}

	// Check if the job has already succeeded
	if githubRelease.Status.JobStatus == "Complete" {
		log.Info("Job has already succeeded for %s", githubRelease.Name)
		return ctrl.Result{}, nil
	}

	// Fetch and update the status with delta asset URL if not already fetched
	if githubRelease.Status.DeltaAssetURL == "" {
		deltaAssetURL, err := r.getDeltaAssetUrl(githubRelease.Spec.URL)
		if err != nil || deltaAssetURL == "" {
			log.Error(err, "Failed to fetch delta asset url from %s", githubRelease.Spec.URL)
			return ctrl.Result{}, err
		}

		githubRelease.Status.DeltaAssetURL = deltaAssetURL
		if err := r.Status().Update(ctx, githubRelease); err != nil {
			log.Error(err, "Unable to update GitHubRelease status")
			return ctrl.Result{}, err
		}
	}

	job := &batchv1.Job{}
	// Create a job if it does not exists
	err := r.Get(ctx, types.NamespacedName{Name: fmt.Sprintf("%s-job", githubRelease.Name), Namespace: req.Namespace}, job)
	if err != nil && errors.IsNotFound(err) {
		job, err = r.createJob(githubRelease)
		if err != nil {
			log.Error(err, "Failed to create Job for GitHubRelease")
			return ctrl.Result{}, err
		}

		if err := r.Create(ctx, job); err != nil {
			log.Error(err, "Unable to create Job for GitHubRelease", "Job", job.Name)
			return ctrl.Result{}, err
		}

		log.Info("Created Job for GitHubRelease", "Job", githubRelease.Name)
	}

	// Delete the failed Job if backoff limit is exceeded. This will re-create the Job in next run
	if job.Status.Failed > githubRelease.Spec.GitHubReleaseJobConfig.BackoffLimit {
		log.Info("Backoff limit exceeded, deleting the Job for GitHubRelease")
		if err := r.Delete(ctx, job); err != nil {
			log.Error(err, "Failed to delete Job for GitHubRelease")
			return ctrl.Result{}, err
		}
		return ctrl.Result{Requeue: true}, nil
	}

	// Update the status
	githubRelease.Status.LastProcessedTime = job.Status.CompletionTime
	githubRelease.Status.JobStatus = r.getJobStatus(job)
	githubRelease.Status.JobRetryCount = job.Status.Failed

	jobRef, err := ref.GetReference(r.Scheme, job)
	if err != nil {
		log.Error(err, "Unable to make reference to the Job", "Job", job)
	}
	githubRelease.Status.JobRef = jobRef

	if err := r.Status().Update(ctx, githubRelease); err != nil {
		log.Error(err, "Unable to update GitHubRelease status")
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

func (r *GitHubReleaseReconciler) getDeltaAssetUrl(url string) (string, error) {
	ctx := context.Background()
	client := github.NewClient(nil)

	releaseURLParts := strings.Split(strings.TrimPrefix(url, "https://github.com/"), "/")
	if len(releaseURLParts) < 2 {
		return "", fmt.Errorf("invalid GitHub releases url: %s", url)
	}
	owner, repo, tag := releaseURLParts[0], releaseURLParts[1], releaseURLParts[4]
	if owner == "" || repo == "" {
		return "", fmt.Errorf("invalid GitHub repository details extracted: owner=%s, repo=%s", owner, repo)
	}

	// Fetch release from the repository
	release, _, err := client.Repositories.GetReleaseByTag(ctx, owner, repo, tag)
	if err != nil {
		return "", err
	}

	for _, asset := range release.Assets {
		if strings.Contains(*asset.Name, "delta") {
			return *asset.BrowserDownloadURL, nil
		}
	}

	return "", nil
}

func (r *GitHubReleaseReconciler) cleanupJobs(ctx context.Context, githubRelease *cveproducerv1.GitHubRelease) error {
	var jobs batchv1.JobList
	if err := r.List(ctx, &jobs, client.InNamespace(githubRelease.Namespace), client.MatchingFields{jobOwnerKey: githubRelease.Name}); err != nil {
		return err
	}

	for _, job := range jobs.Items {
		if err := r.Delete(ctx, &job); err != nil {
			return err
		}
	}
	return nil
}

func (r *GitHubReleaseReconciler) createJob(githubRelease *cveproducerv1.GitHubRelease) (*batchv1.Job, error) {
	configMapKeyRefName := fmt.Sprintf("%s-configmap", githubRelease.Spec.HelmReleaseName)
	secretsKeyRefName := fmt.Sprintf("%s-secrets", githubRelease.Spec.HelmReleaseName)

	job := &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name:      fmt.Sprintf("%s-job", githubRelease.Name),
			Namespace: githubRelease.Namespace,
			Labels: map[string]string{
				"app":                          "cve-processor",
				"app.kubernetes.io/name":       "githubrelease-job",
				"app.kubernetes.io/part-of":    "githubrelease",
				"app.kubernetes.io/managed-by": "cve-operator",
			},
		},
		Spec: batchv1.JobSpec{
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{
						"app":                          "cve-processor",
						"app.kubernetes.io/name":       "githubrelease-job-pod",
						"app.kubernetes.io/part-of":    "githubrelease-job",
						"app.kubernetes.io/component":  "kafka-producer",
						"app.kubernetes.io/managed-by": "cve-operator",
					},
				},
				Spec: corev1.PodSpec{
					RestartPolicy: corev1.RestartPolicyOnFailure,
					ImagePullSecrets: []corev1.LocalObjectReference{
						{Name: fmt.Sprintf("%s-regcred", githubRelease.Spec.HelmReleaseName)},
					},
					Containers: []corev1.Container{
						{
							Name:            "cve-processor",
							Image:           githubRelease.Spec.GitHubReleaseJobConfig.Image,
							ImagePullPolicy: githubRelease.Spec.GitHubReleaseJobConfig.ImagePullPolicy,
							Env: []corev1.EnvVar{
								{
									Name:  "CVE_URL",
									Value: githubRelease.Status.DeltaAssetURL,
								},
								{
									Name: "KAFKA_BROKERS",
									ValueFrom: &corev1.EnvVarSource{
										ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: configMapKeyRefName,
											},
											Key: "kafka_brokers",
										},
									},
								},
								{
									Name: "KAFKA_TOPIC",
									ValueFrom: &corev1.EnvVarSource{
										ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: configMapKeyRefName,
											},
											Key: "kafka_topic",
										},
									},
								},
								{
									Name: "KAFKA_USERNAME",
									ValueFrom: &corev1.EnvVarSource{
										SecretKeyRef: &corev1.SecretKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: secretsKeyRefName,
											},
											Key: "kafka_username",
										},
									},
								},
								{
									Name: "KAFKA_PASSWORD",
									ValueFrom: &corev1.EnvVarSource{
										SecretKeyRef: &corev1.SecretKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: secretsKeyRefName,
											},
											Key: "kafka_password",
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}

	if err := ctrl.SetControllerReference(githubRelease, job, r.Scheme); err != nil {
		return nil, err
	}

	return job, nil
}

func (r *GitHubReleaseReconciler) getJobStatus(job *batchv1.Job) string {
	for _, c := range job.Status.Conditions {
		if (c.Type == batchv1.JobComplete || c.Type == batchv1.JobFailed) && c.Status == corev1.ConditionTrue {
			return string(c.Type)
		}
	}
	return "Processing"
}

var (
	jobOwnerKey = ".metadata.controller"
	apiGVStr    = cveproducerv1.GroupVersion.String()
)

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	// In order to allow our reconciler to quickly look up Jobs by their owner, we'll need an index.
	if err := mgr.GetFieldIndexer().IndexField(context.Background(), &batchv1.Job{}, jobOwnerKey, func(rawObj client.Object) []string {
		job := rawObj.(*batchv1.Job)
		owner := metav1.GetControllerOf(job)
		if owner == nil {
			return nil
		}
		if owner.APIVersion != apiGVStr || owner.Kind != "Job" {
			return nil
		}
		return []string{owner.Name}
	}); err != nil {
		return err
	}

	return ctrl.NewControllerManagedBy(mgr).
		For(&cveproducerv1.GitHubRelease{}).
		Complete(r)
}
