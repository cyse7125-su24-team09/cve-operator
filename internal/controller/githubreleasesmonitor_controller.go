/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"fmt"
	"strings"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	cveproducerv1 "github.com/cyse7125-su24-team09/cve-operator/api/v1"
	"github.com/google/go-github/github"
)

// GitHubReleasesMonitorReconciler reconciles a GitHubReleasesMonitor object
type GitHubReleasesMonitorReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=cve-producer.archops.com,resources=githubreleasesmonitors,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=cve-producer.archops.com,resources=githubreleasesmonitors/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=cve-producer.archops.com,resources=githubreleasesmonitors/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the GitHubReleasesMonitor object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GitHubReleasesMonitorReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	var githubReleasesMonitor cveproducerv1.GitHubReleasesMonitor
	if err := r.Get(ctx, req.NamespacedName, &githubReleasesMonitor); err != nil {
		log.Error(err, "Unable to fetch GitHubReleasesMonitor instance")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	var err error
	var monitorFromTime time.Time

	if githubReleasesMonitor.Spec.MonitorFrom == "now" {
		if githubReleasesMonitor.Status.MonitorFromTimestamp != nil {
			monitorFromTime = githubReleasesMonitor.Status.MonitorFromTimestamp.Time
		} else {
			monitorFromTime = time.Now()
		}
	} else {
		monitorFromTime, err = time.Parse("2006-01-02", githubReleasesMonitor.Spec.MonitorFrom)
		if err != nil {
			log.Error(err, "Invalid date format for monitorFrom: %s", githubReleasesMonitor.Spec.MonitorFrom)
			return ctrl.Result{}, err
		}
		monitorFromTime = monitorFromTime.UTC()
	}

	// Fetch GitHub releases based on the provided URL and monitorFrom
	releases, err := r.getReleases(githubReleasesMonitor.Spec.URL, monitorFromTime)
	if err != nil {
		log.Error(err, "Failed to fetch GitHub releases")
		return ctrl.Result{}, err
	}

	// Fetch existing GitHubRelease instances
	var existingGitHubReleases cveproducerv1.GitHubReleaseList
	if err := r.List(ctx, &existingGitHubReleases, client.InNamespace(req.Namespace)); err != nil {
		log.Error(err, "Unable to list existing GitHubRelease instances")
		return ctrl.Result{}, err
	}

	// Create GitHubRelease resources
	for _, release := range releases {
		releaseNameSuffix := strings.ReplaceAll(release.TagName, "_", "-")
		releaseNameSuffix = strings.ToLower(releaseNameSuffix)
		name := fmt.Sprintf("ghr-%s", releaseNameSuffix)

		if !r.isReleaseExists(&existingGitHubReleases.Items, name) {
			githubRelease := &cveproducerv1.GitHubRelease{
				ObjectMeta: metav1.ObjectMeta{
					Name:      name,
					Namespace: req.Namespace,
					Labels: map[string]string{
						"app":                          "githubrelease",
						"app.kubernetes.io/name":       "githubrelease",
						"app.kubernetes.io/managed-by": "cve-operator",
					},
				},
				Spec: cveproducerv1.GitHubReleaseSpec{
					URL:                    release.URL,
					Name:                   release.Name,
					HelmReleaseName:        githubReleasesMonitor.Spec.HelmReleaseName,
					GitHubReleaseJobConfig: githubReleasesMonitor.Spec.GitHubReleaseJobConfig,
				},
			}

			if err := ctrl.SetControllerReference(&githubReleasesMonitor, githubRelease, r.Scheme); err != nil {
				return ctrl.Result{}, err
			}

			if err := r.Create(ctx, githubRelease); err != nil {
				log.Error(err, "Unable to create GitHubRelease resource", "GitHubRelease", githubRelease.Name)
				return ctrl.Result{}, err
			}

			log.Info("Created GitHubRelease resource", "GitHubrelease", githubRelease.Name)
		}
	}

	// Update the status
	githubReleasesMonitor.Status.Releases = releases
	githubReleasesMonitor.Status.LastRetrievedAt = &metav1.Time{Time: time.Now()}
	githubReleasesMonitor.Status.MonitorFromTimestamp = &metav1.Time{Time: monitorFromTime}

	// Update the CRD status
	if err := r.Status().Update(ctx, &githubReleasesMonitor); err != nil {
		log.Error(err, "unable to update GitHubReleasesMonitor status")
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

func (r *GitHubReleasesMonitorReconciler) getReleases(url string, monitorFrom time.Time) ([]cveproducerv1.GitHubReleaseMetaData, error) {
	ctx := context.Background()
	client := github.NewClient(nil)

	repoURLParts := strings.Split(strings.TrimPrefix(url, "https://github.com/"), "/")
	if len(repoURLParts) < 2 {
		return nil, fmt.Errorf("invalid GitHub releases url: %s", url)
	}
	owner, repo := repoURLParts[0], repoURLParts[1]
	if owner == "" || repo == "" {
		return nil, fmt.Errorf("invalid GitHub repository details extracted: owner=%s, repo=%s", owner, repo)
	}

	// Fetch releases from the repository
	opt := &github.ListOptions{PerPage: 100}
	releases, _, err := client.Repositories.ListReleases(ctx, owner, repo, opt)
	if err != nil {
		return nil, err
	}

	var releasesToProcess []cveproducerv1.GitHubReleaseMetaData
	for _, release := range releases {
		if release.PublishedAt != nil && release.PublishedAt.After(monitorFrom) {
			releasesToProcess = append(releasesToProcess, cveproducerv1.GitHubReleaseMetaData{
				Name:        release.GetName(),
				TagName:     release.GetTagName(),
				URL:         release.GetHTMLURL(),
				PublishedAt: metav1.NewTime(release.GetPublishedAt().Time),
			})
		}
	}

	return releasesToProcess, nil
}

func (r *GitHubReleasesMonitorReconciler) isReleaseExists(existingReleases *[]cveproducerv1.GitHubRelease, name string) bool {
	for _, release := range *existingReleases {
		if release.Name == name {
			return true
		}
	}
	return false
}

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleasesMonitorReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&cveproducerv1.GitHubReleasesMonitor{}).
		Complete(r)
}
